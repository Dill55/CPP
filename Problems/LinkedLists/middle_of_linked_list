//https://leetcode.com/problems/middle-of-the-linked-list/


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

// This solution although it appears to be O(log(n)) since we iterate one pointer twice as fast as
// another pointer, effectively finding the middle point similar in a binary tree
// this solution is still O(n) which is how long it would take for a normal list traversal.

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode * fast = head;
        ListNode * slow = head;

        while (fast != nullptr)
        {
            fast = fast -> next;
            if (fast != nullptr)
            {
                fast = fast -> next;
                slow = slow -> next;
            }
        }

        return slow;
    }
};